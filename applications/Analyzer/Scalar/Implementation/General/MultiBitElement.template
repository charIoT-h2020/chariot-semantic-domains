/////////////////////////////////
//
// Library   : Analyzer/Scalar
// Unit      : implementation of general scalar elements
// File      : MultiBitElement.template
// Author    : Franck Vedrine
// Copyright : CEA LIST - 2019-2020 - all rights reserved
//
// Description :
//   Implementation of a multibit template class providing all the operations on multibits.
//

#ifndef Analyzer_Scalar_Implementation_MultiBitElementTemplate
#define Analyzer_Scalar_Implementation_MultiBitElementTemplate

#include "Analyzer/Scalar/Implementation/General/MultiBitElement.h"
#include "Analyzer/Scalar/Implementation/General/MultiFloatElement.h"
// #include "Analyzer/Scalar/Scalar.hpp"

namespace Analyzer {}

#include "Analyzer/Scalar/Implementation/Native/IntegerElement.h"
#include "Numerics/Integer.template"

namespace Analyzer { namespace Scalar {
namespace MultiBit { namespace Implementation { namespace Details {

template <class TypeBase>
bool
TMultiBitImplementOperation<TypeBase>::apply(const CastMultiBitOperation& operation, EvaluationEnvironment& env) {
   inherited::assumeAcceptSize(operation.getResultSize());
   int oldSize = getSize();
   if (operation.getResultSize() > oldSize) {
      inherited::setSize(operation.getResultSize());
      if (operation.isSigned() && inherited::bitArray(oldSize-1)) {
         inherited merge;
         ((thisType&) merge).setSize(getSize());
         merge.neg(getSize()-oldSize);
         merge <<= oldSize;
         inherited::operator|=(merge);
      };
   }
   else if (operation.getResultSize() < oldSize) {
      inherited remainder = *this;
      if (!operation.isSigned()) {
         remainder >>= operation.getResultSize();
         if (!remainder.isZero())
            env.setPositiveOverflow();
      }
      else {
         remainder >>= operation.getResultSize()-1;
         if (!remainder.isZero() && !remainder.neg(oldSize-operation.getResultSize()+1).isZero()) {
            if (remainder.cbitArray(oldSize-operation.getResultSize()))
               env.setNegativeOverflow();
            else
               env.setPositiveOverflow();
         };
      };
      
      inherited::setSize(operation.getResultSize());
      inherited::normalize();
   };
   return true;
}

template <class TypeBase>
bool
TMultiBitImplementOperation<TypeBase>::apply(const DivideSignedAssignOperation&, const thisType& source, EvaluationEnvironment& env) {
   bool isNegative = inherited::cbitArray(inherited::getSize()-1);
   bool isSourceNegative = source.cbitArray(source.getSize()-1);
   if (source.isZero()) {
      env.setDivisionByZero();
      env.setEmpty();
   }
   else {
      if (isNegative)
         inherited::neg().inc();
      if (isSourceNegative) {
         inherited positiveSource(source);
         positiveSource.neg().inc();
         inherited::operator/=(positiveSource);
      }
      else
         inherited::operator/=(source);
      if (inherited::cbitArray(getSize()-1) && isNegative && isSourceNegative) {
         env.setPositiveOverflow();
         if (env.doesStopErrorStates())
            env.setEmpty();
      }
      else if (isNegative != isSourceNegative)
         inherited::neg().inc();
   };
   return true;
}

template <class TypeBase>
bool
TMultiBitImplementOperation<TypeBase>::apply(const DivideUnsignedAssignOperation&, const thisType& source, EvaluationEnvironment& env) {
   if (source.isZero()) {
      env.setDivisionByZero();
      env.setEmpty();
   }
   else
      inherited::operator/=(source);
   return true;
}

template <class TypeBase>
bool
TMultiBitImplementOperation<TypeBase>::apply(const ModuloSignedAssignOperation&, const thisType& source, EvaluationEnvironment& env) {
   if (source.cbitArray(source.getSize()-1)) {
      env.setNegativeModulo();
      if (env.doesStopErrorStates())
         env.setEmpty();
   }
   else if (source.isZero()) {
      env.setDivisionByZero();
      env.setEmpty();
   }
   else {
      bool isNegative = inherited::cbitArray(inherited::getSize()-1);
      if (isNegative)
         inherited::neg().inc();
      inherited::operator%=(source);
      if (isNegative)
         inherited::neg().inc();
   };
   return true;
}

template <class TypeBase>
bool
TMultiBitImplementOperation<TypeBase>::apply(const ModuloUnsignedAssignOperation&, const thisType& source, EvaluationEnvironment& env) {
   if (source.isZero()) {
      env.setDivisionByZero();
      env.setEmpty();
   }
   else
      inherited::operator%=(source);
   return true;
}

template <class TypeMultiTraits>
MultiBitElement::MultiBitElement(const TMultiBitElement<TypeMultiTraits>& source)
   :  inherited(source.getSize()) {
   int nbCell = (source.getSize()-1)/(8*sizeof(unsigned int))+1;
   while (--nbCell >= 0)
      inherited::array(nbCell) = source[nbCell];
   normalizeLastCell();
}

template <class TypeMultiTraits>
TMultiBitElement<TypeMultiTraits>::TMultiBitElement(int size, IntNature nature,
      const Floating::Implementation::Details::TMultiFloatElement<TypeMultiTraits>& floatValue,
      ReadFloatParameters& params) { // Little endian implementation
   inherited::assertSize(size);
   if (nature == INPointer) {
      AssumeCondition(size == floatValue.mantissa().getSize() + floatValue.exponent().getSize() + 1)
      inherited::setBitArray(size-1, floatValue.isNegative());
      inherited mantissa, exponent;
      mantissa.assertSize(floatValue.mantissa().getSize());
      int nbCell = (floatValue.mantissa().getSize()-1)/(8*sizeof(unsigned int))+1;
      while (--nbCell >= 0)
         mantissa[nbCell] = floatValue.mantissa()[nbCell];
      mantissa.normalizeLastCell();
      nbCell = (floatValue.exponent().getSize()-1)/(8*sizeof(unsigned int))+1;
      while (--nbCell >= 0)
         exponent[nbCell] = floatValue.exponent()[nbCell];
      exponent.normalizeLastCell();
      exponent.assertSize(size);
      exponent <<= mantissa.getSize();
      mantissa.assertSize(size);
      inherited::operator|=(exponent).operator|=(mantissa); 
   }
   else {
      typename Floating::Implementation::Details::TMultiFloatElement<TypeMultiTraits>
         ::IntConversion intResult;
      if (nature == INSigned)
         intResult.setSigned();
      else
         intResult.setUnsigned();
      intResult.setSize(inherited::getSize());
      floatValue.retrieveInteger(intResult, params);
      typename Floating::Implementation::Details::TMultiFloatElement<TypeMultiTraits>
         ::IntConversion::BigInt result;
      if (nature == INSigned)
         result = intResult.asInt();
      else
         result = intResult.asUnsignedInt();
      int nbCell = (result.getSize()-1)/(8*sizeof(unsigned int))+1;
      while (--nbCell >= 0)
         inherited::array(nbCell) = result[nbCell];
   };
}

template <class TypeMultiTraits>
TMultiBitElement<TypeMultiTraits>::TMultiBitElement(const MultiBitElement& source)
   :  inherited(source.getSize()) {
   int nbCell = (source.getSize()-1)/(8*sizeof(unsigned int))+1;
   while (--nbCell >= 0)
      inherited::array(nbCell) = source[nbCell];
      // inherited::setArray(nbCell, source[nbCell]);
   inherited::normalizeLastCell();
}

template <class TypeMultiTraits>
void
TMultiBitElement<TypeMultiTraits>::assign(const Scalar::Implementation::VirtualElement& asource) {
   AssumeCondition(dynamic_cast<const Scalar::Implementation::ImplementationElement*>(&asource))
   const Scalar::Implementation::ImplementationElement& isource = (const Scalar::Implementation::ImplementationElement&) asource;
   if (isource.isConstantSigned()) {
      AssumeCondition(dynamic_cast<const Integer::Implementation::IntElement*>(&asource))
      const Integer::Implementation::IntElement& source = (const Integer::Implementation::IntElement&) asource;
      int value = source.getElement();
      inherited::operator=((unsigned int) source.getElement());
      if (value < 0)
         inherited::neg().inc();
   }
   else if (isource.isConstantUnsigned()) {
      AssumeCondition(dynamic_cast<const Integer::Implementation::UnsignedIntElement*>(&asource))
      const Integer::Implementation::UnsignedIntElement& source = (const Integer::Implementation::UnsignedIntElement&) asource;
      inherited::operator=(source.getElement());
   }
   else if (isource.isMultiBit()) {
      AssumeCondition(dynamic_cast<const Implementation::MultiBitElement*>(&asource))
      const Implementation::MultiBitElement& source = (const Implementation::MultiBitElement&) asource;
      int size = source.getSize();
      inherited::setSize(size);
      for (int index = 0; index < (int) (size + 8*sizeof(unsigned int) - 1) / (int) (8*sizeof(unsigned int)); ++index)
         inherited::operator[](index) = source[index];
      // AssumeCondition(dynamic_cast<const Implementation::TMultiBitElement<TypeMultiTraits>*>(&asource))
      // inherited::operator=((const Implementation::TMultiBitElement<TypeMultiTraits>&) asource);
   }
   else
      { AssumeCondition(false) }
}

} // end of namespace Details

}}}} // end of namespace Analyzer::Scalar::MultiBit::Implementation

#endif // Analyzer_Scalar_Implementation_MultiBitElementTemplate
