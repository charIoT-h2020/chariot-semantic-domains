/**************************************************************************/
/*                                                                        */
/*  Copyright (C) 2013-2019                                               */
/*    CEA (Commissariat a l'Energie Atomique et aux Energies              */
/*         Alternatives)                                                  */
/*                                                                        */
/*  you can redistribute it and/or modify it under the terms of the GNU   */
/*  Lesser General Public License as published by the Free Software       */
/*  Foundation, version 2.1.                                              */
/*                                                                        */
/*  It is distributed in the hope that it will be useful,                 */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         */
/*  GNU Lesser General Public License for more details.                   */
/*                                                                        */
/*  See the GNU Lesser General Public License version 2.1                 */
/*  for more details (enclosed in the file LICENSE).                      */
/*                                                                        */
/**************************************************************************/

/////////////////////////////////
//
// Library   : Collection
// Unit      : Low level implementation
// File      : ImplList.template
// Description :
//   Implementation of the template methods of the ImplList class.
//

#ifndef COL_ImplListTemplate
#define COL_ImplListTemplate

#include "Pointer/ImplList.h"

namespace COL {

template <class Execute, class TemplateParameters>
bool
ImplList::foreachDo(TemplateParameters, Execute& function, ImplListElement* prevStart,
      ImplListElement* nextEnd) const {
   typedef typename TemplateParameters::Element Element;
   typedef typename TemplateParameters::Cast Cast;

   if (!pileFirst)
      return true;
   bool result = true;
   ImplListElement* cursor = prevStart ? prevStart->getNext() : pileFirst;
   if (!prevStart || (cursor != pileFirst)) {
      nextEnd = (nextEnd ? nextEnd->getPrevious() : pileFirst->getPrevious());
      ImplListElement* next = nullptr;
      for (; result && cursor != nextEnd; cursor = next) {
         next = cursor->getNext();
         result = function((Element&) Cast::castFrom(*cursor));
      };
      if (result)
         result = function((Element&) Cast::castFrom(*nextEnd));
   };
   return result;
}

template <class Execute, class TemplateParameters>
bool
ImplList::foreachReverseDo(TemplateParameters, Execute& function, ImplListElement* nextStart,
      ImplListElement* prevEnd) const {
   typedef typename TemplateParameters::Element Element;
   typedef typename TemplateParameters::Cast Cast;

   if (!pileFirst)
      return true;
   bool result = true;
   if (nextStart != pileFirst) {
      ImplListElement* cursor = nextStart ? nextStart->getPrevious() : pileFirst->getPrevious();
      prevEnd = (prevEnd ? prevEnd->getNext() : pileFirst);
      for (; result && cursor != prevEnd; cursor = cursor->getPrevious())
         result = function((Element&) Cast::castFrom(*cursor));
      if (result)
         result = function((Element&) Cast::castFrom(*cursor));
   };
   return result;
}

} // end of namespace COL

#endif // COL_ImplListTemplate
