/**************************************************************************/
/*                                                                        */
/*  Copyright (C) 2013-2019                                               */
/*    CEA (Commissariat a l'Energie Atomique et aux Energies              */
/*         Alternatives)                                                  */
/*                                                                        */
/*  you can redistribute it and/or modify it under the terms of the GNU   */
/*  Lesser General Public License as published by the Free Software       */
/*  Foundation, version 2.1.                                              */
/*                                                                        */
/*  It is distributed in the hope that it will be useful,                 */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         */
/*  GNU Lesser General Public License for more details.                   */
/*                                                                        */
/*  See the GNU Lesser General Public License version 2.1                 */
/*  for more details (enclosed in the file LICENSE).                      */
/*                                                                        */
/**************************************************************************/

/////////////////////////////////
//
// Library   : String
// Unit      : Persistency
// File      : IOSubStringMethods.inch
// Description :
//   Implementation of the inline interface methods that do the link between
//   the substring based streams and the classes IOObject::ISBase and IOObject::OSBase.
//

/* DefineTypeObject     : Type of the class under implementation derived from OSBase   */
/* DefineReference      : Substring reference in DefineTypeObject                      */

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::put(char c) {
   DefineReference cat((typename TypeSubString::Char) c);
   return *this;
}

template <class TypeSubString>
inline int
DefineTypeObject<TypeSubString>::tellp() {
   return DefineReference length();
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::seekp(int pos) {
   DefineReference setUpperInfinite();
   DefineReference setUpperOpened();
   DefineReference setLength(pos);
   return *this;
}

template <class TypeSubString>
inline void
DefineTypeObject<TypeSubString>::assumeAlloc(int incSize)
   { DefineReference bookPlace(incSize); }

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::write(char ch, bool) {
   DefineReference cat((typename TypeSubString::Char) ch);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::write(int n, bool isRaw) {
   if (isRaw) {
      static const int nbChars = (sizeof(n)-1)/sizeof(typename TypeSubString::Char)+1;
      typename TypeSubString::Char string[nbChars];
      memset(&string, 0, nbChars*sizeof(typename TypeSubString::Char));
      memcpy(&string, &n, sizeof(n));
      DefineReference cat(string, nbChars);
   }      
   else
      DefineReference catInteger(n);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::writeHexa(int n) {
   DefineReference catHexaInteger(n);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::write(unsigned int n, bool isRaw) {
   if (isRaw) {
      static const int nbChars = (sizeof(n)-1)/sizeof(typename TypeSubString::Char)+1;
      typename TypeSubString::Char string[nbChars];
      memset(&string, 0, nbChars*sizeof(typename TypeSubString::Char));
      memcpy(&string, &n, sizeof(n));
      DefineReference cat(string, nbChars);
   }
   else
      DefineReference catInteger(n);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::writeHexa(unsigned int n) {
   DefineReference catHexaInteger(n);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::write(long int n, bool isRaw) {
   if (isRaw) {
      static const int nbChars = (sizeof(n)-1)/sizeof(typename TypeSubString::Char)+1;
      typename TypeSubString::Char string[nbChars];
      memset(&string, 0, nbChars*sizeof(typename TypeSubString::Char));
      memcpy(&string, &n, sizeof(n));
      DefineReference cat(string, nbChars);
   }      
   else
      DefineReference catInteger(n);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::writeHexa(long int n) {
   DefineReference catHexaInteger(n);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::write(unsigned long int n, bool isRaw) {
   if (isRaw) {
      static const int nbChars = (sizeof(n)-1)/sizeof(typename TypeSubString::Char)+1;
      typename TypeSubString::Char string[nbChars];
      memset(&string, 0, nbChars*sizeof(typename TypeSubString::Char));
      memcpy(&string, &n, sizeof(n));
      DefineReference cat(string, nbChars);
   }
   else
      DefineReference catInteger(n);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::writeHexa(unsigned long int n) {
   DefineReference catHexaInteger(n);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::write(double f, bool isRaw) {
   if (isRaw) {
      static const int nbChars = (sizeof(f)-1)/sizeof(typename TypeSubString::Char)+1;
      typename TypeSubString::Char string[nbChars];
      memset(&string, 0, nbChars*sizeof(typename TypeSubString::Char));
      memcpy(&string, &f, sizeof(f));
      DefineReference cat(string, nbChars);
   }
   else
      DefineReference catFloat(f);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::write(bool b, bool isRaw) {
   if (isRaw)
      DefineReference cat((typename TypeSubString::Char) b);
   else
      DefineReference cat((typename TypeSubString::Char) b ? '0' : '1');
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::writechunk(void* achunk) {
   TChunk<typename TypeSubString::Char>& chunk = *((TChunk<typename TypeSubString::Char>*) achunk);
   DefineReference cat(chunk.string, chunk.length);
   return *this;
}

template <class TypeSubString>
inline IOObject::OSBase&
DefineTypeObject<TypeSubString>::flush() {
   return *this;
}

